// Generated by kaoscript 0.8.0
var __ks__ = require("@kaoscript/runtime");
var Helper = __ks__.Helper, Type = __ks__.Type;
module.exports = function() {
	var __ks__ = require("@kaoscript/ast")();
	var AssignmentOperatorKind = __ks__.AssignmentOperatorKind, BinaryOperatorKind = __ks__.BinaryOperatorKind, ModifierKind = __ks__.ModifierKind, NodeKind = __ks__.NodeKind, ScopeKind = __ks__.ScopeKind, UnaryOperatorKind = __ks__.UnaryOperatorKind;
	var __ks__ = require("kaoscript")();
	var CodeFragment = __ks__.CodeFragment, FragmentBuilder = __ks__.FragmentBuilder, ControlBuilder = __ks__.ControlBuilder, BlockBuilder = __ks__.BlockBuilder, ExpressionBuilder = __ks__.ExpressionBuilder, LineBuilder = __ks__.LineBuilder, ObjectBuilder = __ks__.ObjectBuilder, ArrayBuilder = __ks__.ArrayBuilder, Module = __ks__.Module, Compiler = __ks__.Compiler, compileFile = __ks__.compileFile, getBinaryPath = __ks__.getBinaryPath, getHashPath = __ks__.getHashPath, getMetadataPath = __ks__.getMetadataPath, isUpToDate = __ks__.isUpToDate, extensions = __ks__.extensions;
	function $block(init, data, coverage, coverageName, file, node) {
		if(init === undefined || init === null) {
			throw new Error("Missing parameter 'init'");
		}
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		if(data.kind === NodeKind.Block) {
			data.statements = [].concat(init, $compile.statements(data.statements, coverage, coverageName, file, node));
			return data;
		}
		else {
			return {
				kind: NodeKind.Block,
				statements: [].concat(init, $compile.statements([data], coverage, coverageName, file, node))
			};
		}
	}
	function $body(data) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(data.kind === NodeKind.Block) {
			return data;
		}
		else {
			return {
				kind: NodeKind.Block,
				statements: [{
					kind: NodeKind.ReturnStatement,
					value: data,
					start: data.start,
					end: data.end
				}]
			};
		}
	}
	var $compile = {
		expression: function(data, coverage, coverageName, file, node) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(coverage === undefined || coverage === null) {
				throw new Error("Missing parameter 'coverage'");
			}
			if(coverageName === undefined || coverageName === null) {
				throw new Error("Missing parameter 'coverageName'");
			}
			if(file === undefined || file === null) {
				throw new Error("Missing parameter 'file'");
			}
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			return $expressions[data.kind](data, coverage, coverageName, file, node);
		},
		statements: function(statements, coverage, coverageName, file, node) {
			if(statements === undefined || statements === null) {
				throw new Error("Missing parameter 'statements'");
			}
			if(coverage === undefined || coverage === null) {
				throw new Error("Missing parameter 'coverage'");
			}
			if(coverageName === undefined || coverageName === null) {
				throw new Error("Missing parameter 'coverageName'");
			}
			if(file === undefined || file === null) {
				throw new Error("Missing parameter 'file'");
			}
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			var result = [];
			for(var __ks_0 = 0, __ks_1 = statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = statements[__ks_0];
				var sid = coverage.statementMap.length + 1;
				coverage.statementMap.push({
					start: {
						line: statement.start.line,
						column: statement.start.column - 1
					},
					end: {
						line: statement.end.line,
						column: statement.end.column - 1
					}
				});
				result.push({
					kind: NodeKind.UnaryExpression,
					operator: {
						kind: UnaryOperatorKind.IncrementPostfix
					},
					argument: {
						kind: NodeKind.MemberExpression,
						object: {
							kind: NodeKind.MemberExpression,
							object: {
								kind: NodeKind.MemberExpression,
								object: {
									kind: NodeKind.Identifier,
									name: coverageName
								},
								property: {
									kind: NodeKind.Literal,
									value: file
								},
								computed: true,
								nullable: false
							},
							property: {
								kind: NodeKind.Identifier,
								name: "s"
							},
							computed: false,
							nullable: false
						},
						property: {
							kind: NodeKind.NumericExpression,
							value: sid
						},
						computed: true,
						nullable: false
					},
					attributes: []
				});
				if(Type.isValue($statements[statement.kind])) {
					result.push($statements[statement.kind](statement, coverage, coverageName, file, node));
				}
				else {
					result.push($expressions[statement.kind](statement, coverage, coverageName, file, node));
				}
			}
			return result;
		}
	};
	var $expressions = {};
	$expressions[NodeKind.ArrayComprehension] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		return data;
	};
	$expressions[NodeKind.ArrayExpression] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		data.values = Helper.mapArray(data.values, function(value) {
			return $compile.expression(value, coverage, coverageName, file, node);
		});
		return data;
	};
	$expressions[NodeKind.ArrayRange] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		return data;
	};
	$expressions[NodeKind.BinaryExpression] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		if((data.operator.kind === BinaryOperatorKind.And) || (data.operator.kind === BinaryOperatorKind.Or)) {
			var bid = coverage.branchMap.length + 1;
			coverage.branchMap.push({
				type: "binary-expr",
				line: data.start.line,
				locations: [{
					start: {
						line: data.left.start.line,
						column: data.left.start.column - 1
					},
					end: {
						line: data.left.end.line,
						column: data.left.end.column - 1
					}
				}, {
					start: {
						line: data.right.start.line,
						column: data.right.start.column - 1
					},
					end: {
						line: data.right.end.line,
						column: data.right.end.column - 1
					}
				}]
			});
			data.left = $sequence($increment.branch(bid, 0, coverageName, file), data.left, coverage, coverageName, file, node);
			data.right = $sequence($increment.branch(bid, 1, coverageName, file), data.right, coverage, coverageName, file, node);
		}
		else {
			data.left = $compile.expression(data.left, coverage, coverageName, file, node);
			data.right = $compile.expression(data.right, coverage, coverageName, file, node);
		}
		return data;
	};
	$expressions[NodeKind.CallExpression] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		data.callee = $compile.expression(data.callee, coverage, coverageName, file, node);
		data.arguments = Helper.mapArray(data.arguments, function(argument) {
			return $compile.expression(argument, coverage, coverageName, file, node);
		});
		return data;
	};
	$expressions[NodeKind.ConditionalExpression] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		var bid = coverage.branchMap.length + 1;
		coverage.branchMap.push({
			type: "cond-expr",
			line: data.start.line,
			locations: [{
				start: {
					line: data.whenTrue.start.line,
					column: data.whenTrue.start.column - 1
				},
				end: {
					line: data.whenTrue.end.line,
					column: data.whenTrue.end.column - 1
				}
			}, {
				start: {
					line: data.whenFalse.start.line,
					column: data.whenFalse.start.column - 1
				},
				end: {
					line: data.whenFalse.end.line,
					column: data.whenFalse.end.column - 1
				}
			}]
		});
		data.condition = $compile.expression(data.condition, coverage, coverageName, file, node);
		data.whenTrue = $sequence($increment.branch(bid, 0, coverageName, file), data.whenTrue, coverage, coverageName, file, node);
		data.whenFalse = $sequence($increment.branch(bid, 1, coverageName, file), data.whenFalse, coverage, coverageName, file, node);
		return data;
	};
	$expressions[NodeKind.CreateExpression] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		data.class = $compile.expression(data.class, coverage, coverageName, file, node);
		data.arguments = Helper.mapArray(data.arguments, function(argument) {
			return $compile.expression(argument, coverage, coverageName, file, node);
		});
		return data;
	};
	$expressions[NodeKind.CurryExpression] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		data.callee = $compile.expression(data.callee, coverage, coverageName, file, node);
		if(data.scope.kind === ScopeKind.Argument) {
			data.scope.value = $compile.expression(data.scope.value, coverage, coverageName, file, node);
		}
		data.arguments = Helper.mapArray(data.arguments, function(argument) {
			return $compile.expression(argument, coverage, coverageName, file, node);
		});
		return data;
	};
	$expressions[NodeKind.EnumExpression] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		return data;
	};
	$expressions[NodeKind.FunctionExpression] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		return $function(data, coverage, coverageName, file, node);
	};
	$expressions[NodeKind.IfExpression] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		var bid = coverage.branchMap.length + 1;
		if(Type.isValue(data.whenFalse)) {
			coverage.branchMap.push({
				type: "cond-expr",
				line: data.start.line,
				locations: [{
					start: {
						line: data.whenTrue.start.line,
						column: data.whenTrue.start.column - 1
					},
					end: {
						line: data.whenTrue.end.line,
						column: data.whenTrue.end.column - 1
					}
				}, {
					start: {
						line: data.whenFalse.start.line,
						column: data.whenFalse.start.column - 1
					},
					end: {
						line: data.whenFalse.end.line,
						column: data.whenFalse.end.column - 1
					}
				}]
			});
			data.condition = $compile.expression(data.condition, coverage, coverageName, file, node);
			data.whenTrue = $sequence($increment.branch(bid, 0, coverageName, file), data.whenTrue, coverage, coverageName, file, node);
			data.whenFalse = $sequence($increment.branch(bid, 1, coverageName, file), data.whenFalse, coverage, coverageName, file, node);
		}
		else {
			coverage.branchMap.push({
				type: "cond-expr",
				line: data.start.line,
				locations: [{
					start: {
						line: data.start.line,
						column: data.start.column - 1
					},
					end: {
						line: data.start.line,
						column: data.start.column - 1
					}
				}, {
					start: {
						line: data.start.line,
						column: data.start.column - 1
					},
					end: {
						line: data.start.line,
						column: data.start.column - 1
					}
				}]
			});
			data.condition = $compile.expression(data.condition, coverage, coverageName, file, node);
			data.whenTrue = $sequence($increment.branch(bid, 0, coverageName, file), data.whenTrue, coverage, coverageName, file, node);
		}
		return data;
	};
	$expressions[NodeKind.MemberExpression] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		data.object = $compile.expression(data.object, coverage, coverageName, file, node);
		return data;
	};
	$expressions[NodeKind.NumericExpression] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		return data;
	};
	$expressions[NodeKind.Identifier] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		return data;
	};
	$expressions[NodeKind.LambdaExpression] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		return $function(data, coverage, coverageName, file, node);
	};
	$expressions[NodeKind.Literal] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		return data;
	};
	$expressions[NodeKind.ObjectExpression] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		var properties = data.properties;
		data.properties = [];
		for(var __ks_0 = 0, __ks_1 = properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
			property = properties[__ks_0];
			data.properties.push($compile.expression(property, coverage, coverageName, file, node));
		}
		return data;
	};
	$expressions[NodeKind.ObjectMember] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		data.value = $compile.expression(data.value, coverage, coverageName, file, node);
		return data;
	};
	$expressions[NodeKind.PolyadicExpression] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		if((data.operator.kind === BinaryOperatorKind.And) || (data.operator.kind === BinaryOperatorKind.Or)) {
			var bid = coverage.branchMap.length + 1;
			var branch;
			coverage.branchMap.push(branch = {
				type: "binary-expr",
				line: data.start.line,
				locations: []
			});
			var operands = data.operands;
			data.operands = [];
			for(var index = 0, __ks_0 = operands.length, operand; index < __ks_0; ++index) {
				operand = operands[index];
				branch.locations.push({
					start: {
						line: operand.start.line,
						column: operand.start.column - 1
					},
					end: {
						line: operand.end.line,
						column: operand.end.column - 1
					}
				});
				data.operands.push($sequence($increment.branch(bid, index, coverageName, file), operand, coverage, coverageName, file, node));
			}
		}
		else {
			data.operands = Helper.mapArray(data.operands, function(operand) {
				return $compile.expression(operand, coverage, coverageName, file, node);
			});
		}
		return data;
	};
	$expressions[NodeKind.RegularExpression] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		return data;
	};
	$expressions[NodeKind.TemplateExpression] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		data.elements = Helper.mapArray(data.elements, function(element) {
			return $compile.expression(element, coverage, coverageName, file, node);
		});
		return data;
	};
	$expressions[NodeKind.TypeReference] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		return data;
	};
	$expressions[NodeKind.UnaryExpression] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		data.argument = $compile.expression(data.argument, coverage, coverageName, file, node);
		return data;
	};
	$expressions[NodeKind.UnlessExpression] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		var bid = coverage.branchMap.length + 1;
		coverage.branchMap.push({
			type: "cond-expr",
			line: data.start.line,
			locations: [{
				start: {
					line: data.start.line,
					column: data.start.column - 1
				},
				end: {
					line: data.start.line,
					column: data.start.column - 1
				}
			}, {
				start: {
					line: data.start.line,
					column: data.start.column - 1
				},
				end: {
					line: data.start.line,
					column: data.start.column - 1
				}
			}]
		});
		data.condition = $compile.expression(data.condition, coverage, coverageName, file, node);
		data.whenFalse = $sequence($increment.branch(bid, 0, coverageName, file), data.whenFalse, coverage, coverageName, file, node);
		return data;
	};
	function $function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		var fid = coverage.fnMap.length + 1;
		coverage.fnMap.push({
			name: (Type.isValue(data.name) && Type.isValue(data.name.name)) ? data.name.name : ("(anonymous_" + fid + ")"),
			line: data.start.line,
			loc: {
				start: {
					line: data.start.line,
					column: data.start.column - 1
				},
				end: {
					line: data.end.line,
					column: data.end.column - 1
				}
			}
		});
		data.body = $block({
			kind: NodeKind.UnaryExpression,
			operator: {
				kind: UnaryOperatorKind.IncrementPostfix
			},
			argument: {
				kind: NodeKind.MemberExpression,
				object: {
					kind: NodeKind.MemberExpression,
					object: {
						kind: NodeKind.MemberExpression,
						object: {
							kind: NodeKind.Identifier,
							name: coverageName
						},
						property: {
							kind: NodeKind.Literal,
							value: file
						},
						computed: true,
						nullable: false
					},
					property: {
						kind: NodeKind.Identifier,
						name: "f"
					},
					computed: false,
					nullable: false
				},
				property: {
					kind: NodeKind.NumericExpression,
					value: fid
				},
				computed: true,
				nullable: false
			},
			attributes: []
		}, $body(data.body), coverage, coverageName, file, node);
		return data;
	}
	function $if(condition, whenTrue, coverage, coverageName, file, node) {
		if(condition === undefined || condition === null) {
			throw new Error("Missing parameter 'condition'");
		}
		if(whenTrue === undefined || whenTrue === null) {
			throw new Error("Missing parameter 'whenTrue'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		var data = {
			kind: NodeKind.IfStatement,
			condition: condition,
			start: condition.start,
			end: whenTrue.end
		};
		if(whenTrue.kind === NodeKind.Block) {
			data.whenTrue = whenTrue;
		}
		else {
			data.whenTrue = {
				kind: NodeKind.Block,
				statements: [whenTrue]
			};
		}
		return $statements[NodeKind.IfStatement](data, coverage, coverageName, file, node);
	}
	var $increment = {
		branch: function(bid, eid, coverageName, file) {
			if(bid === undefined || bid === null) {
				throw new Error("Missing parameter 'bid'");
			}
			if(eid === undefined || eid === null) {
				throw new Error("Missing parameter 'eid'");
			}
			if(coverageName === undefined || coverageName === null) {
				throw new Error("Missing parameter 'coverageName'");
			}
			if(file === undefined || file === null) {
				throw new Error("Missing parameter 'file'");
			}
			return {
				kind: NodeKind.UnaryExpression,
				operator: {
					kind: UnaryOperatorKind.IncrementPostfix
				},
				argument: {
					kind: NodeKind.MemberExpression,
					object: {
						kind: NodeKind.MemberExpression,
						object: {
							kind: NodeKind.MemberExpression,
							object: {
								kind: NodeKind.MemberExpression,
								object: {
									kind: NodeKind.Identifier,
									name: coverageName
								},
								property: {
									kind: NodeKind.Literal,
									value: file
								},
								computed: true,
								nullable: false
							},
							property: {
								kind: NodeKind.Identifier,
								name: "b"
							},
							computed: false,
							nullable: false
						},
						property: {
							kind: NodeKind.NumericExpression,
							value: bid
						},
						computed: true,
						nullable: false
					},
					property: {
						kind: NodeKind.NumericExpression,
						value: eid
					},
					computed: true,
					nullable: false
				},
				attributes: []
			};
		}
	};
	function $sequence(init, data, coverage, coverageName, file, node) {
		if(init === undefined || init === null) {
			throw new Error("Missing parameter 'init'");
		}
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		if(data.kind === NodeKind.SequenceExpression) {
			var expressions = data.expressions;
			data.expressions = [init];
			for(var __ks_0 = 0, __ks_1 = expressions.length, expression; __ks_0 < __ks_1; ++__ks_0) {
				expression = expressions[__ks_0];
				data.expressions.push($compile.expression(expression, coverage, coverageName, file, node));
			}
			return data;
		}
		else {
			return {
				kind: NodeKind.SequenceExpression,
				expressions: [init, $compile.expression(data, coverage, coverageName, file, node)]
			};
		}
	}
	var $statements = {};
	$statements[NodeKind.BreakStatement] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		return data;
	};
	$statements[NodeKind.ClassDeclaration] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		var members = data.members;
		data.members = [];
		for(var __ks_0 = 0, __ks_1 = members.length, member; __ks_0 < __ks_1; ++__ks_0) {
			member = members[__ks_0];
			var __ks_2 = member.kind;
			if(__ks_2 === NodeKind.FieldDeclaration) {
				if(Type.isValue(member.defaultValue)) {
					member.defaultValue = $compile.expression(member.defaultValue, coverage, coverageName, file, node);
				}
				data.members.push(member);
			}
			else if(__ks_2 === NodeKind.MethodDeclaration) {
				data.members.push($statements[NodeKind.FunctionDeclaration](member, coverage, coverageName, file, node));
			}
			else {
				console.error(member);
				$throw("Not Implemented", node);
			}
		}
		return data;
	};
	$statements[NodeKind.ContinueStatement] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		return data;
	};
	$statements[NodeKind.DestroyStatement] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		return data;
	};
	$statements[NodeKind.DoUntilStatement] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		data.condition = $compile.expression(data.condition, coverage, coverageName, file, node);
		data.body.statements = $compile.statements(data.body.statements, coverage, coverageName, file, node);
		return data;
	};
	$statements[NodeKind.DoWhileStatement] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		data.condition = $compile.expression(data.condition, coverage, coverageName, file, node);
		data.body.statements = $compile.statements(data.body.statements, coverage, coverageName, file, node);
		return data;
	};
	$statements[NodeKind.EnumDeclaration] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		return data;
	};
	$statements[NodeKind.ExportDeclaration] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		data.declarations = Helper.mapArray(data.declarations, function(declaration) {
			return (Type.isValue($statements[declaration.kind]) ? $statements[declaration.kind] : $expressions[declaration.kind])(declaration, coverage, coverageName, file, node);
		});
		return data;
	};
	$statements[NodeKind.ExternDeclaration] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		return data;
	};
	$statements[NodeKind.ExternOrRequireDeclaration] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		return data;
	};
	$statements[NodeKind.ForFromStatement] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		data.from = $compile.expression(data.from, coverage, coverageName, file, node);
		if(Type.isValue(data.til)) {
			data.til = $compile.expression(data.til, coverage, coverageName, file, node);
		}
		else {
			data.to = $compile.expression(data.to, coverage, coverageName, file, node);
		}
		if(Type.isValue(data.by)) {
			data.by = $compile.expression(data.by, coverage, coverageName, file, node);
		}
		if(Type.isValue(data.when)) {
			data.body = $if(data.when, data.body, coverage, coverageName, file, node);
			delete data.when;
		}
		else {
			data.body.statements = $compile.statements(data.body.statements, coverage, coverageName, file, node);
		}
		return data;
	};
	$statements[NodeKind.ForInStatement] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		if(Type.isValue(data.when)) {
			data.body = $if(data.when, data.body, coverage, coverageName, file, node);
			delete data.when;
		}
		else {
			data.body.statements = $compile.statements(data.body.statements, coverage, coverageName, file, node);
		}
		return data;
	};
	$statements[NodeKind.ForOfStatement] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		if(Type.isValue(data.when)) {
			data.body = $if(data.when, data.body, coverage, coverageName, file, node);
			delete data.when;
		}
		else {
			data.body.statements = $compile.statements(data.body.statements, coverage, coverageName, file, node);
		}
		return data;
	};
	$statements[NodeKind.FunctionDeclaration] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		return $function(data, coverage, coverageName, file, node);
	};
	$statements[NodeKind.IfStatement] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		var bid = coverage.branchMap.length + 1;
		var loc = {
			start: {
				line: data.start.line,
				column: data.start.column - 1
			},
			end: {
				line: data.start.line,
				column: data.start.column - 1
			}
		};
		coverage.branchMap.push({
			type: "if",
			line: data.start.line,
			locations: [loc, loc]
		});
		data.condition = $compile.expression(data.condition, coverage, coverageName, file, node);
		data.whenTrue = $block($increment.branch(bid, 0, coverageName, file), data.whenTrue, coverage, coverageName, file, node);
		if(Type.isValue(data.whenFalse)) {
			data.whenFalse = $block($increment.branch(bid, 1, coverageName, file), data.whenFalse, coverage, coverageName, file, node);
		}
		return data;
	};
	$statements[NodeKind.ImplementDeclaration] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		var properties = data.properties;
		data.properties = [];
		for(var __ks_0 = 0, __ks_1 = properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
			property = properties[__ks_0];
			var __ks_2 = property.kind;
			if(__ks_2 === NodeKind.MethodDeclaration) {
				data.properties.push($statements[NodeKind.FunctionDeclaration](property, coverage, coverageName, file, node));
			}
			else if(__ks_2 === NodeKind.MethodAliasDeclaration) {
				data.properties.push(property);
			}
			else if(__ks_2 === NodeKind.MethodLinkDeclaration) {
				data.properties.push(property);
			}
			else {
				console.error(property);
				$throw("Not Implemented", node);
			}
		}
		return data;
	};
	$statements[NodeKind.ImportDeclaration] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		return data;
	};
	$statements[NodeKind.IncludeDeclaration] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		return data;
	};
	$statements[NodeKind.IncludeOnceDeclaration] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		return data;
	};
	$statements[NodeKind.RequireDeclaration] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		return data;
	};
	$statements[NodeKind.RequireOrExternDeclaration] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		return data;
	};
	$statements[NodeKind.RequireOrImportDeclaration] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		return data;
	};
	$statements[NodeKind.ReturnStatement] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		if(Type.isValue(data.value)) {
			data.value = $compile.expression(data.value, coverage, coverageName, file, node);
		}
		return data;
	};
	$statements[NodeKind.ThrowStatement] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		data.value = $compile.expression(data.value, coverage, coverageName, file, node);
		return data;
	};
	$statements[NodeKind.TryStatement] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		data.body.statements = $compile.statements(data.body.statements, coverage, coverageName, file, node);
		return data;
	};
	$statements[NodeKind.TypeAliasDeclaration] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		return data;
	};
	$statements[NodeKind.UnlessStatement] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		var bid = coverage.branchMap.length + 1;
		var loc = {
			start: {
				line: data.start.line,
				column: data.start.column - 1
			},
			end: {
				line: data.start.line,
				column: data.start.column - 1
			}
		};
		coverage.branchMap.push({
			type: "if",
			line: data.start.line,
			locations: [loc, loc]
		});
		data.condition = $compile.expression(data.condition, coverage, coverageName, file, node);
		data.whenFalse = $block($increment.branch(bid, 0, coverageName, file), data.whenFalse, coverage, coverageName, file, node);
		return data;
	};
	$statements[NodeKind.UntilStatement] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		data.condition = $compile.expression(data.condition, coverage, coverageName, file, node);
		data.body.statements = $compile.statements(data.body.statements, coverage, coverageName, file, node);
		return data;
	};
	$statements[NodeKind.VariableDeclaration] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		for(var __ks_0 = 0, __ks_1 = data.declarations.length, declaration; __ks_0 < __ks_1; ++__ks_0) {
			declaration = data.declarations[__ks_0];
			if(Type.isValue(declaration.init)) {
				declaration.init = $compile.expression(declaration.init, coverage, coverageName, file, node);
			}
		}
		return data;
	};
	$statements[NodeKind.WhileStatement] = function(data, coverage, coverageName, file, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(coverage === undefined || coverage === null) {
			throw new Error("Missing parameter 'coverage'");
		}
		if(coverageName === undefined || coverageName === null) {
			throw new Error("Missing parameter 'coverageName'");
		}
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		data.condition = $compile.expression(data.condition, coverage, coverageName, file, node);
		data.body.statements = $compile.statements(data.body.statements, coverage, coverageName, file, node);
		return data;
	};
	function $throw() {
		if(arguments.length < 1) {
			throw new Error("Wrong number of arguments");
		}
		var __ks_i = -1;
		var message = arguments[++__ks_i];
		if(arguments.length > 1) {
			var node = arguments[++__ks_i];
		}
		else {
			var node = null;
		}
		var error = new Error(message);
		if(Type.isValue(node)) {
			error.filename = node.file();
		}
		throw error;
	}
	var CoverageCompiler = Helper.class({
		$name: "CoverageCompiler",
		$extends: Compiler,
		__ks_init_1: function() {
			this._instrument = false;
		},
		__ks_init: function() {
			Compiler.prototype.__ks_init.call(this);
			CoverageCompiler.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Compiler.prototype.__ks_cons.call(this, args);
		},
		__ks_func_instrument_0: function(coverageName) {
			if(coverageName === undefined || coverageName === null) {
				coverageName = "__ks_coverage";
			}
			this._coverageName = coverageName;
			this._instrument = true;
			return this;
		},
		instrument: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return CoverageCompiler.prototype.__ks_func_instrument_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_compile_0: function(data) {
			if(data === undefined) {
				data = null;
			}
			if(this._instrument) {
				this._module = new CoverageModule(Type.isValue(data) ? data : this.readFile(), this._coverageName, this, this._file);
			}
			else {
				this._module = new Module(Type.isValue(data) ? data : this.readFile(), this, this._file);
			}
			this._module.analyse();
			this._module.fuse();
			this._fragments = this._module.toFragments();
			return this;
		},
		compile: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return CoverageCompiler.prototype.__ks_func_compile_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	CoverageCompiler.__ks_reflect = {
		inits: 1,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_coverageName: {
				access: 1,
				type: "Any"
			},
			_instrument: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			instrument: [
				{
					access: 3,
					min: 0,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 0,
							max: 1
						}
					]
				}
			],
			compile: [
				{
					access: 3,
					min: 0,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 0,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var CoverageModule = Helper.class({
		$name: "CoverageModule",
		$extends: Module,
		__ks_init_1: function() {
			this._coverages = [];
		},
		__ks_init: function() {
			Module.prototype.__ks_init.call(this);
			CoverageModule.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, coverageName, compiler, file) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(coverageName === undefined || coverageName === null) {
				throw new Error("Missing parameter 'coverageName'");
			}
			if(compiler === undefined || compiler === null) {
				throw new Error("Missing parameter 'compiler'");
			}
			if(file === undefined || file === null) {
				throw new Error("Missing parameter 'file'");
			}
			this._coverageName = coverageName;
			Module.prototype.__ks_cons.call(this, [data, compiler, file]);
		},
		__ks_cons: function(args) {
			if(args.length === 4) {
				CoverageModule.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Module.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_parse_0: function(data, file) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(file === undefined || file === null) {
				throw new Error("Missing parameter 'file'");
			}
			var coverage;
			this._coverages.push(coverage = {
				path: file,
				statementMap: [],
				branchMap: [],
				fnMap: []
			});
			data = Module.prototype.parse.apply(this, [data, file]);
			data.body = $compile.statements(data.body, coverage, this._coverageName, file, this);
			data.body.unshift({
				kind: NodeKind.ExternDeclaration,
				declarations: [{
					kind: NodeKind.VariableDeclarator,
					name: {
						kind: NodeKind.Identifier,
						name: this._coverageName
					}
				}],
				attributes: []
			});
			return data;
		},
		parse: function() {
			if(arguments.length === 2) {
				return CoverageModule.prototype.__ks_func_parse_0.apply(this, arguments);
			}
			return Module.prototype.parse.apply(this, arguments);
		},
		__ks_func_toFragments_0: function() {
			var header = new FragmentBuilder(0);
			header.line("var " + this._coverageName + " = (function(_export) {\n\treturn typeof _export." + this._coverageName + " === 'undefined' ? _export." + this._coverageName + " = {} : _export." + this._coverageName + ";\n})(typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : this)");
			var __ks_0 = this._coverages;
			for(var __ks_1 = 0, __ks_2 = __ks_0.length, coverage; __ks_1 < __ks_2; ++__ks_1) {
				coverage = __ks_0[__ks_1];
				this.toCoverageFragments(header, coverage);
			}
			return header.toArray().concat(Module.prototype.toFragments.apply(this, []));
		},
		toFragments: function() {
			if(arguments.length === 0) {
				return CoverageModule.prototype.__ks_func_toFragments_0.apply(this);
			}
			return Module.prototype.toFragments.apply(this, arguments);
		},
		__ks_func_toCoverageFragments_0: function(fragments, coverage) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(coverage === undefined || coverage === null) {
				throw new Error("Missing parameter 'coverage'");
			}
			var line = fragments.newLine();
			line.code("if(!" + this._coverageName + "[\"" + coverage.path + "\"]) {\n");
			line.code("\t" + this._coverageName + "[\"" + coverage.path + "\"] = {");
			line.code("\"path\":\"" + coverage.path + "\",");
			line.code("\"s\":{");
			for(var i = 1, __ks_0 = coverage.statementMap.length; i <= __ks_0; ++i) {
				if(i > 1) {
					line.code(",");
				}
				line.code("\"" + i + "\":0");
			}
			line.code("},");
			line.code("\"b\":{");
			for(var i = 1, __ks_0 = coverage.branchMap.length; i <= __ks_0; ++i) {
				if(i > 1) {
					line.code(",");
				}
				line.code("\"" + i + "\":[");
				for(var j = 0, __ks_1 = coverage.branchMap[i - 1].locations.length; j < __ks_1; ++j) {
					if(j !== 0) {
						line.code(",");
					}
					line.code("0");
				}
				line.code("]");
			}
			line.code("},");
			line.code("\"f\":{");
			for(var i = 1, __ks_0 = coverage.fnMap.length; i <= __ks_0; ++i) {
				if(i > 1) {
					line.code(",");
				}
				line.code("\"" + i + "\":0");
			}
			line.code("},");
			line.code("\"statementMap\":{");
			for(var i = 0, __ks_0 = coverage.statementMap.length; i < __ks_0; ++i) {
				if(i > 0) {
					line.code(",");
				}
				line.code("\"" + (i + 1) + "\":" + JSON.stringify(coverage.statementMap[i]));
			}
			line.code("},");
			line.code("\"branchMap\":{");
			for(var i = 0, __ks_0 = coverage.branchMap.length; i < __ks_0; ++i) {
				if(i > 0) {
					line.code(",");
				}
				line.code("\"" + (i + 1) + "\":" + JSON.stringify(coverage.branchMap[i]));
			}
			line.code("},");
			line.code("\"fnMap\":{");
			for(var i = 0, __ks_0 = coverage.fnMap.length; i < __ks_0; ++i) {
				if(i > 0) {
					line.code(",");
				}
				line.code("\"" + (i + 1) + "\":" + JSON.stringify(coverage.fnMap[i]));
			}
			line.code("}");
			line.code("};\n");
			line.code("}");
			line.done();
		},
		toCoverageFragments: function() {
			if(arguments.length === 2) {
				return CoverageModule.prototype.__ks_func_toCoverageFragments_0.apply(this, arguments);
			}
			else if(Module.prototype.toCoverageFragments) {
				return Module.prototype.toCoverageFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	CoverageModule.__ks_reflect = {
		inits: 1,
		constructors: [
			{
				access: 3,
				min: 4,
				max: 4,
				parameters: [
					{
						type: "Any",
						min: 4,
						max: 4
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_coverageName: {
				access: 1,
				type: "Any"
			},
			_coverages: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			parse: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			],
			toFragments: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toCoverageFragments: [
				{
					access: 1,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	return {
		Compiler: CoverageCompiler,
		extensions: extensions,
		getBinaryPath: getBinaryPath,
		getHashPath: getHashPath,
		isUpToDate: isUpToDate
	};
}